#!/usr/bin/env python3
# Info:
# Original script by Taras Khvorost April 2024
# Modified by Ryan Choi Feb 2024
"""
Program for calculation of anharmonic freqs and "anharmonic fcfs" from Gaussian outputs and Anne McCoy's vpt program
"""
import argparse
import sys
import os
from Psience.VPT2 import VPTAnalyzer
import numpy as np
import code


def existing_file(path):
    if os.path.isfile(path):
        return os.path.abspath(path)
    else:
        raise FileNotFoundError('bad path for '+path)


def parse_arguments(custom_arguments=None):
    parser = argparse.ArgumentParser(prog='afc',
                                     description='Anharmonic Frank-Condon')
    parser.add_argument('harm', type=existing_file,
                        metavar='HARMONIC_OUTPUT',
                        help='''.csv file from Gaussian or .xml.out file from ezfcf''')
    parser.add_argument('harmtype', choices=('g16', 'ezfcf'),
                        metavar='HARMONIC_TYPE',
                        help='''G16 or EZFCF harmonic file''')
    parser.add_argument('vpttxt', type=existing_file,
                        metavar='VPT_OUTPUT_TXT',
                        help='''.txt output of VPT file''')
    parser.add_argument('vpthdf5', type=existing_file,
                        metavar='VPT_OUTPUT_HDF5',
                        help='''.hdf5 output of VPT file''')
    parser.add_argument('-o', nargs='?', type=argparse.FileType('w'),
                        metavar='OUTFILE', default=sys.stdout,
                        help='file to write output to.\nDefaults to STDOUT')
    if custom_arguments == None:
        return parser.parse_args()
    return parser.parse_args(custom_arguments)


def parse_gaussian(args):
    with open(args.harm, 'r') as f:
        g16_text = f.readlines()[1:] #skip header
    harm_fcfs = {}
    # create a dict of form {state: fcf}
    for l in g16_text:
        final_state, rel_e, current_harm_fcf = l.split(',')
        final_state = final_state.rstrip('>').lstrip('|').split(';')
        final_state_list = [0 for _ in range(args.DOF)]
        if final_state == ['0']:
            harm_fcfs['0'*args.DOF] = float(current_harm_fcf.strip())
            continue
        for excitation in final_state:
            mode, n = excitation.split('^')
            mode, n = int(mode), int(n)
            final_state_list[mode-1] = n
        harm_fcfs[''.join(map(str, final_state_list))] = float(current_harm_fcf)
    return harm_fcfs


def parse_ezfcf(args):
    with open(args.harm, 'r') as f:
        ezfcf_text = f.readlines()
    #Parse ezFCF ouput, create a datastructure corresponding to the degeneracy blocks
    flag = 0
    harm_fcfs = {}
    # create a dict of form {state: fcf}
    for l in ezfcf_text:
        if 'Stick photoelectron spectrum (with Dushinsky rotations)' in l: flag = 1
        if not flag or len(l.split('->')) == 1: continue
        stuff, final_state = l.split('->')
        current_harm_fcf = float(stuff.split()[2]) ** 2
        final_state = final_state.lstrip('(').rstrip('\n').rstrip(')')[2:]
        if final_state == '0':
            harm_fcfs['0'*args.DOF] = float(current_harm_fcf)
            continue
        vib = [0 for x in range(args.DOF)]
        for quantum_of_excitation in final_state.split(','):
            n, mode = quantum_of_excitation.split('v')
            n, mode = int(n), int(mode)
            vib[mode] = n
        harm_fcfs[''.join(map(str, vib))] = float(current_harm_fcf) 
    return harm_fcfs

def parse_harmonic(args):
    if args.harmtype == 'g16':
        args.harm_fcfs = parse_gaussian(args)
        return args.harm_fcfs
    args.harm_fcfs = parse_ezfcf(args)
    return args.harm_fcfs

def parse_vpt_txt(args):
    with open(args.vpttxt, 'r') as f:
        vpt_text = f.readlines()
    flag, prev_line, states, states_clean = 0, '', [], {}
    # parse DOF and NATOMS:
    for l in vpt_text:
        if '::> States' in prev_line:
            args.DOF = len(l.split('[[')[1].split())
            args.NATOMS = int((args.DOF + 6)/3)
            break
        prev_line = l
    # parse states (with energies), zpe_anharm and zpe_harm:
    for l in vpt_text:
        if '::> Degenerate Energies' in prev_line:
            flag = 1
        if 'ZPE' in prev_line.split() and flag:
            args.ZPE, args.ZPE_HARM = float(l.split()[-3]), float(l.split()[-4])
        if flag and '0' in l.split():
            states.append(l.split())
        prev_line = l
    # Create a dict with state as key and [harm_e, anham_e] as value
    for i in states:
        if i[-1] == '-':
            states_clean['0'*args.DOF] = [0, 0] # ZPE
            continue
        states_clean[''.join(i[:args.DOF]).rstrip('-')] = list(map(float, i[-2:]))
    states_clean = dict(sorted(states_clean.items(), key=lambda item: item[1][1])) # sort by anham_e
    args.states_vpt = states_clean
    return states_clean


def parse_vpt_hdf5(args):
    analyzer = VPTAnalyzer(args.vpthdf5)
    # create an array of states degenerate blocks to have same datastruct. as
    # analyzer.depertrurbed_hams, i.e.  
    # [ [ [1,1,0,0], [0,0,1,0] ] , 
    #   [ [0,1,1,0], [0,0,0,1] ] ,...]
    # states [1,1,0,0] and [0,0,1,0] form a degen. block
    degenerate_state_blocks_diag, wf_blocks_expansions = [], []
    degenerate_state_blocks = [state_block for state_block in analyzer.degenerate_states if len(state_block) > 1]
    # re-diagonalize hams using shift_and_transform_ham with shift=0, collect energies and expantion coefficients
    for state_block, ham in zip(degenerate_state_blocks, analyzer.deperturbed_hamiltonians):
        eigvals, wf_block_expansion = analyzer.shift_and_transform_hamiltonian(ham, 0)
        degenerate_state_blocks_diag.append(list(''.join(map(str, arr)) for arr in state_block))
        wf_blocks_expansions.append(wf_block_expansion)
    # blocks_diag and blocks are the same thing, but the former is in the
    # string format to interface with other parts of the code
    args.degenerate_state_blocks_diag = degenerate_state_blocks_diag
    args.wf_blocks_expansions = wf_blocks_expansions
    return degenerate_state_blocks_diag, wf_blocks_expansions


def get_harm_fcf_blocks(args):
    # organize the hamonic data, so it matches the vpt degen blocks
    harm_fcf_blocks = []
    for degenerate_block in args.degenerate_state_blocks_diag:
        for single_state in degenerate_block:
            if single_state not in args.harm_fcfs:
                args.harm_fcfs[single_state] = 0 # if the state from the block is not in the parsed harm_fcfs, just assume it has a 0 fcf
        harm_fcf_blocks.append(list([args.harm_fcfs[x] for x in degenerate_block]))
    args.harm_fcf_blocks = harm_fcf_blocks
    return harm_fcf_blocks


def correct_fcfs(args):
    anharm_fcfs = dict()
    for coeff_block, fcf_block, state_block in zip(args.wf_blocks_expansions, args.harm_fcf_blocks, args.degenerate_state_blocks_diag):
        for coeff, state, fcf in zip(coeff_block, state_block, fcf_block):
            FCF = np.sum(abs(coeff) ** 2 * np.array(fcf_block))
            anharm_fcfs[state] = FCF
    args.anharm_fcfs = anharm_fcfs
    #anharm_fcfs can only have states from the degen blocks, correcting for that
    corrected_fcfs = dict()
    for harmonic_state, harmonic_fcf in args.harm_fcfs.items():
        if harmonic_state in anharm_fcfs:
            corrected_fcfs[harmonic_state] = anharm_fcfs[harmonic_state]
            continue
        else:
            corrected_fcfs[harmonic_state] = harmonic_fcf
    args.corrected_fcfs = corrected_fcfs

def clean_state(state): 
    state_clean = '|'
    for i, vib in enumerate(state):
        if vib == '0': continue
        state_clean += str(i+1) + '^' + str(vib) + ';'
    return state_clean+'>'

        

def main(custom_arguments=None):
    """
    Returns args
    Namespace explanation:
     args.harm_fcfs is a {state: harm_fcf}
     args.anharm_fcfs is a {state: anharm_fcf} note that not all states are here
     args.corrected_fcfs is a {state: corrected_fcf} 
     args.states_vpt is a {state: harm_e, anharm_e}
     args.wf_blocks_expansions is a list of blocks with expansions
     args.degenerate_state_blocks_diag is a list with blocks of states
     args.harm_fcf_blocks is a list with blocks of fcfs matching the degen blocks
    """
    args = parse_arguments(custom_arguments)
    parse_vpt_txt(args)
    parse_vpt_hdf5(args)
    parse_harmonic(args)
    get_harm_fcf_blocks(args)
    correct_fcfs(args)
    print('state,state_clean,harm_e,anharm_e,harm_fcf,anharm_fcf', file=args.o)
    for state, harmonic_fcf in args.harm_fcfs.items():
        if state not in args.corrected_fcfs or state not in args.states_vpt: continue
        print("'"+state+"'", clean_state(state), args.states_vpt[state][0], args.states_vpt[state][1], harmonic_fcf, args.corrected_fcfs[state], sep=',', file=args.o)
    return args


if __name__ == '__main__':
    main()
