#!/usr/bin/env python3
import os 
import argparse
import sys
import math

def parse_arguments(non_interactive_arguments=None):
    parser = argparse.ArgumentParser(prog='rasp',
                                     description='RASSI Parser')
    parser.add_argument('rassi_output', type=open,
                        help='''Output file of the RASSI calculation''')
    parser.add_argument('-o', nargs='?', type=argparse.FileType('w'),
                        metavar='OUTFILE', default=sys.stdout,
                        help='Output of the script. Default is stdout.')
    parser.add_argument('-spectype', choices=['v', 'l', 'm', 'f'], 
                        metavar='SPECTYPE', default='l',
                        help='Type of spectrum to plot. v, \
                              l and m are velocity, length \
                              magnetic transitions. use f for TINT keyword.')
    parser.add_argument('--units', choices=['cm', 'ev', 'nm'], 
                        metavar='UNIT', default='cm',
                        help='Units for the specturm. Default nm')
    parser.add_argument('-noso', action='store_true',
                        help='Do not use spin-orbit.')
    parser.add_argument('-trdc', action='store_true',
                        help='Use this if TRDC option was set in rassi input')
    parser.add_argument('-py', type=str, default=False,
                        help='Output in python format. \
                              Optionally can specify the dict name',
                        nargs='?')
    parser.add_argument('-mcd', action='store_true',
                        help='Create the matricies files for mcd code')
    parser.add_argument('-thermal', type=int,
                        help='Perform thermal averaging. Specify T.',
                        metavar='TEMP')
    if non_interactive_arguments == None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(non_interactive_arguments)
    args.so = False if args.noso else True
    if args.spectype in ['v', 'm', 'f']:
        args.trdc = False
    args.filename = args.rassi_output.name
    return args


def get_roots(args):
    roots = {}
    started = 0
    flag_line = '::    RASSI State' if not args.so else \
                                   '::    SO-RASSI State'
    for line in args.rassi_output:
        if flag_line in line:
            started = 1
        if flag_line in line and started:
            state, e = int(line.split()[3]), float(line.split()[-1])
            roots[state] = e
        if not flag_line in line and started:
            break
    args.roots = roots
    return roots


def get_spectrum(args):
    roots = {}
    spec_lines = {'l': '++ Dipole transition strengths',
                  'v': '++ Velocity transition strengths',
                  'm': '++ Magnetic-Dipole',
                  'f':  '++ Isotropic transition moment strengths (SO states):'}
    flag_line = spec_lines[args.spectype]
    started = 0
    spectrum = {}
    for line in args.rassi_output:
        if flag_line in line:
            started = 1
        if not started or not line.split(): continue
        if line.split()[0] == '--': 
            break
        try:
            initial, final, osc_str, *rest = line.split()
            initial, final = map(int, (initial, final))
            osc_str = float(osc_str)
            osc_str *= args.populations[initial]
            delta_e = args.roots[final] - args.roots[initial]
            dipole_matrix_element = (osc_str * 1.5) / delta_e
            delta_e_ev = delta_e * 27.211396641308
            delta_e_cm = ((delta_e_ev * 1.602177e-19)/(6.62607015e-34 * 299792458)) / 100
            delta_e_nm = 1/delta_e_cm * 10e6
            e = {'ev': delta_e_ev,
                 'cm': delta_e_cm, 
                 'nm': delta_e_nm}
            spectrum[f'{initial}->{final}'] = (e[args.units], osc_str, dipole_matrix_element)
        except ValueError:
            continue
    args.spectrum = {k: v for k, v in sorted(spectrum.items(), key=lambda item: item[1][0])} #sort by e
    return spectrum


def get_spectrum_trdc(args):
    args.spectrum = {}
    roots = {}
    flag_line = '++ Complex transition dipole vectors'
    started = 0
    spectrum = {}
    for line in args.rassi_output:
        if flag_line in line:
            started = 1
        if not started or not line.split(): continue
        if line.split()[0] == '--': 
            break
        try:
            initial, final, x_r, x_i, y_r, y_i, z_r, z_i = line.split()
            x = complex(float(x_r), float(x_i))
            y = complex(float(y_r), float(y_i))
            z = complex(float(z_r), float(z_i))
            initial, final = map(int, (initial, final))
            dipole_matrix_element = x*x.conjugate() + y*y.conjugate() + z*z.conjugate()
            dipole_matrix_element = dipole_matrix_element.real
            delta_e = args.roots[final] - args.roots[initial]
            osc_str = (2/3) * dipole_matrix_element * delta_e
            osc_str *= args.populations[initial]
            delta_e_ev = delta_e * 27.211396641308
            delta_e_cm = ((delta_e_ev * 1.602177e-19)/(6.62607015e-34 * 299792458)) / 100
            delta_e_nm = 1/delta_e_cm * 10e6
            e = {'ev': delta_e_ev,
                 'cm': delta_e_cm, 
                 'nm': delta_e_nm}
            spectrum[f'{initial}->{final}'] = (e[args.units], osc_str, dipole_matrix_element)
        except ValueError:
            continue
    args.spectrum = {k: v for k, v in sorted(spectrum.items(), key=lambda item: item[1][0])}
    return spectrum


def compute_populations(args):
    """given the dict of roots, computes populations for all of them"""
    if not args.thermal:
        args.populations = {k:v for k,v in zip(args.roots, [1 for x in args.roots])}
        return
    gs = args.roots[1]
    k = 8.617333262e-5 
    beta = 1 / (k*args.thermal)
    args.populations = {}
    for state, energy in args.roots.items():
        gap = energy - gs
        gap *= 27.211396641308
        args.populations[state] = math.exp(-(gap) * beta)
    return 


def print_spectrum(args):
    if args.py is False:
        print(f'transition', f'energy_{args.units}', 'osc_str', '<i|mu|f>^2',
              file=args.o, sep=',')
        for k, v in args.spectrum.items():
            print(k, v[0], v[1], v[2], file=args.o, sep=',')
        return
    dict_name = args.spectype if args.py == None else args.py
    print(f'data_{dict_name} = ', '{', file=args.o)
    for k, v in args.spectrum.items():
        print(' '*4, f"'{k}' : ", 
              '{', 
              f"'energy_{args.units}': {v[0]}, 'osc_str': {v[1]}, 'dipole_matrix_element': {v[2]}", 
              '},',
              file=args.o)
    print('}', file=args.o)


def get_matricies(args):
    roots = {}
    prop_lines = ['ANGMOM', 'MLTPL', 'AMFI']
    parsing_prop = 1
    spin_started = 0
    args.properties = {}
    for line in args.rassi_output:
        if 'Spin-orbit properties section' in line:
            spin_started = 1
            continue
        if not spin_started or not line.split(): continue
        if 'PROPERTY' in line:
            current_prop = line.split('PROPERTY:')[1].split()[0]
            dimention = line.split()[-1]
            if current_prop in prop_lines :
                args.properties[current_prop+dimention] = parse_property(args)
    print_matricies(args)


def parse_property(args):
    '''
    receives file object, advances its pointer by parsing the matrix
    '''
    result = []
    for _ in range(int(len(args.roots)/2)): #matrix blocks
        row1, row2 = [], []
        args.rassi_output.readline() #empty line
        args.rassi_output.readline() #states
        for b in args.roots:
            line = args.rassi_output.readline()
            i,j = line.split(')   (')
            row1.append(i.split('(')[1])
            row2.append(j.rstrip(')\n'))
        result.append(row1)
        result.append(row2)
    return result


def print_matricies(args):
    """
    Print the results of get_matricies
    """
    #check if the files exist already
    ask = False
    file_list = {'spin-1.txt':'AMFI1',
                 'spin-2.txt':'AMFI2',
                 'spin-3.txt':'AMFI3',
                 'dipole-1.txt':'MLTPL1',
                 'dipole-2.txt':'MLTPL2',
                 'dipole-3.txt':'MLTPL3',
                 'angmom-1.txt':'ANGMOM1',
                 'angmom-2.txt':'ANGMOM2',
                 'angmom-3.txt':'ANGMOM3',
                 'energies.txt':''}
    for file in file_list:
        if os.path.isfile(file):
            ask = True
    if ask:
        while True:
            user_input = input("The file(s) already exist. Overwrite? (y/N): ")
            if user_input.lower() in ["yes", "y"]:
                break
            elif user_input.lower() in ["no", "n"]:
                exit(0)
            else:
                continue
    with open('energies.txt', 'w') as f:
        print('#', len(args.roots), '(atomic units)', file=f)
        for root in args.roots.values():
            print("{:15.8f}".format(root), file=f)
    for file in file_list:
        if file == 'energies.txt': continue
        with open(file, 'w') as f:
            f.write(' #NROW NCOL REAL IMAG\n')
            for idx1, i in enumerate(args.properties[file_list[file]]):
                for idx2, j in enumerate(i):
                    print("{:4.0f}".format(idx2+1), file=f, end='')
                    print("{:4.0f}".format(idx1+1), file=f, end='')
                    real, imag = map(float, j.split(','))
                    print("{:26.16E}".format(real), end='', file=f)
                    print("{:26.16E}".format(imag), file=f)

def main(non_interactive_arguments=None):
    args = parse_arguments(non_interactive_arguments)
    roots = get_roots(args)
    if not roots:
        return 1
    compute_populations(args)
    if args.mcd:
        get_matricies(args)
        exit(0)
    if args.trdc:
        get_spectrum_trdc(args)
    else:
        get_spectrum(args)
    args.rassi_output.close()
    if non_interactive_arguments != None and args.o == sys.stdout:
        return args.spectrum
    print_spectrum(args)
    return args.spectrum


if __name__ == '__main__':
    main()
