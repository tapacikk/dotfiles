#!/usr/bin/env python3
import os 
import argparse
import sys

def parse_arguments():
    parser = argparse.ArgumentParser(prog='rasp',
                                     description='RASSI Parser')
    parser.add_argument('rassi_output', type=open,
                        help='''Output file of the RASSI calculation''')
    parser.add_argument('-o', nargs='?', type=argparse.FileType('w'),
                        metavar='OUTFILE', default=sys.stdout,
                        help='Output of the script. Default is stdout.')
    parser.add_argument('-spectype', choices=['v', 'l', 'm'], 
                        metavar='SPECTYPE', default='l',
                        help='Type of spectrum to plot. v, \
                              l and m are velocity, length \
                              and magnetic transitions')
    parser.add_argument('--units', choices=['cm', 'ev', 'nm'], 
                        metavar='UNIT', default='nm',
                        help='Units for the specturm. Default nm')
    parser.add_argument('-so', action='store_true',
                        help='Plot Spin-Orbit states. Default off')
    parser.add_argument('-py', action='store_true',
                        help='Output in python format')
    parser.add_argument('-mcd', action='store_true',
                        help='Create the matricies files for mcd code')
    args = parser.parse_args()
    args.filename = args.rassi_output.name
    return args


def get_roots(args):
    roots = {}
    flag_line = 'Eigenvalues of complex Hamiltonian' if args.so else 'SPIN-FREE ENERGIES:'
    breakline = 'Weights' if args.so else 'Dipole'
    started = 0
    EMIN = 0
    for line in args.rassi_output:
        if started and breakline in line: break
        if flag_line in line:
            started = 1
        if not started: continue
        if 'EMIN (a.u.)' in line:
            EMIN = float(line.split()[-1].strip(')'))
            args.EMIN = EMIN
        if EMIN:
            try:
                roots[int(line.split()[0])] = float(line.split()[1]) + EMIN
            except ValueError:
                continue
            except IndexError:
                continue
    args.roots = roots
    return roots

def get_spectrum(args):
    roots = {}
    spec_lines = {'l': '++ Dipole transition strengths',
                  'v': '++ Velocity transition strengths',
                  'm':  '++ Magnetic-Dipole'}
    flag_line = spec_lines[args.spectype]
    started = 0
    spectrum = {}
    for line in args.rassi_output:
        if flag_line in line:
            started = 1
        if not started or not line.split(): continue
        if line.split()[0] == '--': 
            break
        try:
            initial, final, osc_str, a_x, a_y, a_z, *rest = line.split()
            initial, final = map(int, (initial, final))
            osc_str, a_x, a_y, a_z = map(float, (osc_str, a_x, a_y, a_z))
            delta_e = args.roots[final] - args.roots[initial]
            delta_e_ev = delta_e * 27.211396641308
            delta_e_cm = ((delta_e_ev * 1.602177e-19)/(6.62607015e-34 * 299792458)) / 100
            delta_e_nm = 1/delta_e_cm * 10e6
            e = {'ev': delta_e_ev,
                 'cm': delta_e_cm, 
                 'nm': delta_e_nm}
            #spectrum[e[args.units]] = (osc_str, a_x, a_y, a_z, )
            spectrum[f'{initial}->{final}'] = (e[args.units], osc_str, a_x, a_y, a_z)
        except ValueError:
            continue
    #args.spectrum = {k: v for k, v in sorted(spectrum.items(), key=lambda item: item[0])}
    args.spectrum = {k: v for k, v in sorted(spectrum.items(), key=lambda item: item[1][0])}
    return spectrum


def print_spectrum(args):
    if not args.py:
        print(f'transition', f'energy_{args.units}','oscillator strength', file=args.o, sep=',')
        for k, v in args.spectrum.items():
            print(k, v[0], v[1], file=args.o, sep=',')
        return
    print(f'data_{args.spectype} = ', '{', file=args.o)
    for k, v in args.spectrum.items():
        print(' '*4, f"'{k}' : ", 
              '{', 
              f"'energy_{args.units}': {v[0]}, 'oscillator_strength': {v[1]},", 
              file=args.o)
    print('}', file=args.o)

def get_matricies(args):
    roots = {}
    prop_lines = ['ANGMOM', 'MLTPL', 'AMFI']
    parsing_prop = 1
    spin_started = 0
    args.properties = {}
    for line in args.rassi_output:
        if 'Spin-orbit properties section' in line:
            spin_started = 1
            continue
        if not spin_started or not line.split(): continue
        if 'PROPERTY' in line:
            current_prop = line.split('PROPERTY:')[1].split()[0]
            dimention = line.split()[-1]
            if current_prop in prop_lines :
                args.properties[current_prop+dimention] = parse_property(args)
    print_matricies(args)


def parse_property(args):
    '''
    receives file object, advances its pointer by parsing the matrix
    '''
    result = []
    for _ in range(int(len(args.roots)/2)):
        row1, row2 = [], []
        args.rassi_output.readline() #empty line
        args.rassi_output.readline() #states
        for _ in args.roots:
            i,j = args.rassi_output.readline().split(')   (')
            row1.append(i.split('(')[1])
            row2.append(j.rstrip(')\n'))
        result.append(row1)
        result.append(row2)
    return result


def print_matricies(args):
    """
    Print the results of get_matricies
    """
    #check if the files exist already
    ask = False
    file_list = {'spin-1.txt':'AMFI1',
                 'spin-2.txt':'AMFI2',
                 'spin-3.txt':'AMFI3',
                 'dipole-1.txt':'MLTPL1',
                 'dipole-2.txt':'MLTPL2',
                 'dipole-3.txt':'MLTPL3',
                 'angmom-1.txt':'ANGMOM1',
                 'angmom-2.txt':'ANGMOM2',
                 'angmom-3.txt':'ANGMOM3'}
    for file in file_list:
        if os.path.isfile(file):
            ask = True
    if ask:
        while True:
            user_input = input("The file(s) already exist. Overwrite? (y/N): ")
            if user_input.lower() in ["yes", "y"]:
                break
            elif user_input.lower() in ["no", "n"]:
                exit(0)
            else:
                continue
    for file in file_list:
        with open(file, 'w') as f:
            f.write('#NROW NCOL REAL IMAG\n')
            for idx1, i in enumerate(args.properties[file_list[file]]):
                for idx2, j in enumerate(i):
                    front = ' '*(4-len(str(idx1)))+str(idx1)+' '*(4-len(str(idx1)))+str(idx2)
                    print(front, j, file=f)
    exit(0)

def main():
    args = parse_arguments()
    roots = get_roots(args)
    if args.mcd:
        get_matricies(args)
    get_spectrum(args)
    args.rassi_output.close()
    print_spectrum(args)


if __name__ == '__main__':
    main()
